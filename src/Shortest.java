import java.util.Scanner;

public class Shortest {
	public static void main(String[] args) {
		Dictionary dict = new Dictionary();
		Scanner scan = new Scanner(System.in);
	    System.out.print("give first word: ");
		String first = scan.nextLine();//takes input as first word
		System.out.print("give second word: ");
		String end = scan.nextLine();//takes input as second word
		// converts the given words to upper case
		first = first.toUpperCase();
		end = end.toUpperCase();
		// if length is not equal outputs -1
		if(first.length()!=end.length()) System.out.println(-1);
		// if given words not exist in dictionary outputs -1
		else if(!(dict.Contains(first)&&(dict.Contains(end)))) System.out.println(-1);
		else {
		Queue Q = new Queue();//Queue takes all Dictionary words created by changing each letter of parent word
	    Q.enQueue(first);// loading the Queue with first word
	    Set Con = new Set();//Con stores all the dictionary words that are used and prevents the generation of already existing words
	    Shortest temp = new Shortest();
		int len =  temp.Transform(end,dict,Q,Con,0);
	    System.out.println("transform length=" +len);
	    }
	 
		
	   /*the output will be -1 if there is no way that first word can be transformed into second
	   word i.e. if it cannot change from first word to second word using words in Dictionary file */
	}
	/*The Function Transform is a recursive function which gives the length to transform the given first word to
	 * second word. if no solution exists it returns -1.  It works in the same way as BreadthFirst search.
	 * In each recursive step all the possible set of dictionary words that can be generated by changing letters of the words are stored and 
	 * sent to next recursive function where they behave as latter set of words. in each call it is checked
	 * with the given word and if matched the function stops by returning the length .
	 * The function stops either if solution is found or the Queue becomes empty i.e. there is no single
	 * way to reach from first word to second word 
	 */
	public int Transform(String end,Dictionary dict,Queue Q,Set Con,int len){
	    Queue Que = new Queue();    
		while(!Q.isEmpty()) {
		    String S = Q.deQueue();
	    	Con.Add(S);
	    	if(S.equals(end)) return len;
	    	StringBuffer str = new StringBuffer(S);
	    	for(int i=0;i<str.length();i++) {
	    		for(int j=0;j<26;j++) {
	    			str.setCharAt(i,(char)('A'+j));
	    			if(dict.Contains(str.toString())){
	    				if(!Con.Contains(str.toString())) {
	    					if(str.toString().equals(end)) return len+1;
	    					Que.enQueue(str.toString());
	    				}
	    			}
	    			str = new StringBuffer(S);
	    		}
	    	}
	      }
		if(!Que.isEmpty())return Transform(end,dict,Que,Con,len+1);
		else return -1;
	}
	
}


